<!DOCTYPE html>
<html>
  <head>
    <title>Simple Map</title>
    <meta name="viewport" content="initial-scale=1.0">
    <meta charset="utf-8">
    <style>
      /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */
      #map {
        height: 300px;
        width: 300px;
      }
      /* Optional: Makes the sample page fill the window. */
      html {
        height: 100%;
        margin: 0;
      }
    </style>
  </head>
  <body>
    <div id="map"></div>
    <h3><%= @listing.creator.name %>'s listing:</h3>
    <h2><%= @listing.title %></h2>
    <p>Price: <%= @listing.price %></p>
    <p><%= @listing.full_street_address %></p>
    <p>Number of people needed for task:<span id="helpers_needed"><%= @still_needed %></span></p>
    <p><%= @date %></p>
    <img src="<%= @listing.image %>">

    <% if !@thisUserListing %>
    <button id='will-help-btn'>I'll Help!</button>
    <% end %>
    <button id='cal-api-btn'>Add to my Google Calendar</button>
    <script src="https://apis.google.com/js/api.js"></script>
    <div class="userPics">


    </div>
    <script>
    //CALENDER API-------------------------

 // Client ID and API key from the Developer Console
    $('#cal-api-btn').on('click', function(event) {

      var CLIENT_ID = '563965008331-pn17v97cf0tj5m1qhhhefjqrt4knmaks.apps.googleusercontent.com';
                       // 563965008331-pn17v97cf0tj5m1qhhhefjqrt4knmaks.apps.googleusercontent.com

      // Array of API discovery doc URLs for APIs used by the quickstart
      var DISCOVERY_DOCS = ["https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest"];

      // Authorization scopes required by the API; multiple scopes can be
      // included, separated by spaces.
      var SCOPES = "https://www.googleapis.com/auth/calendar";

      var authorizeButton = document.getElementById('cal-api-btn');
      //var signoutButton = document.getElementById('signout-button');

      /**
       *  On load, called to load the auth2 library and API client library.
       */

      function handleClientLoad() {
        gapi.load('client:auth2', initClient);
      }


      function handleAuthClick(event) {
        gapi.auth2.getAuthInstance().signIn();
      }

      /**
       *  Initializes the API client library and sets up sign-in state
       *  listeners.
       */
      function initClient() {
        gapi.client.init({
          discoveryDocs: DISCOVERY_DOCS,
          clientId: CLIENT_ID,
          scope: SCOPES
        }).then(function () {
          // Listen for sign-in state changes.
          gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);
          // Handle the initial sign-in state.
          updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
          authorizeButton.onclick = handleAuthClick;
          // signoutButton.onclick = handleSignoutClick;
        });
      }

      function updateSigninStatus(isSignedIn) {

          if (isSignedIn) {

            console.info('authorized')
            // authorizeButton.style.display = 'none';
            // signoutButton.style.display = 'block';
            // listUpcomingEvents();
            // var for api cal info
            // var apiCalInfo = {
            //   'summary': '<%= @listing.title %>',
            //   'moveDate': '<%= @listing.moving_date %>',
            //   'moveTime': '<%= @listing.moving_time %>',
            //   'creatorId': '<%= @listing.creator_id %>'
            // }

          var apiCalInfo = {
            'summary': '<%= @listing.title %>',
            'location': '<%= @listing.street %>',
            'description': 'A chance to hear more about Google\'s developer products.',
            'start': {
              'dateTime': '<%= @listing.moving_date.to_datetime.iso8601 %>',
              'timeZone': 'Australia/Melbourne'
            },
            'end': {
              'dateTime': '<%= @listing.moving_date.to_datetime.iso8601 %>',
              'timeZone': 'Australia/Melbourne'
            }
          };

              var request = gapi.client.calendar.events.insert({
                  'calendarId': 'primary',
                  'resource': apiCalInfo
              });


            request.execute(function(event) {
              // appendPre('Event created: ' + event.htmlLink);
              console.log(event);
            });

          } else {
            console.info('not authorised')
            // authorizeButton.style.display = 'block';
            // signoutButton.style.display = 'none';
          }
      }

          handleClientLoad()
         });

// AJAX CODE----------------------------

    $('#will-help-btn').on('click', function(event) {

      var token = $('meta[name="csrf-token"]').attr('content');
        event.preventDefault();
        $('#will-help-btn').css({"display": "none"})

        var options = {
          url: "/api/listings",
          method: 'post',
          data: {
            listing_id: <%= @listing.id %>
          }
        }
        var updateStillNeeded = function(response) {
          console.log(response.still_needed)
          var $still_needed = $('#helpers_needed')
          $still_needed.text(response.still_needed);
          debugger
          response.users.forEach(function(user){
            $img = $('<img>')
            $img.attr('src', user.image.url)
            $('.userPics').append($img)
          })        }
      $.ajax(options).done(updateStillNeeded);

    });

  </script>

    <script>
      var map;
      function initMap() {
        var moving_location = {lat: <%= @listing.latitude %>, lng: <%= @listing.longitude %>}
        map = new google.maps.Map(document.getElementById('map'), {
          center: moving_location,
          zoom: 15
        });
        var marker = new google.maps.Marker({
         position: moving_location,
         map: map
       });
      }
    </script>

<!-- api scripts -->
    <script async defer
      src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAGyR8cc8zPWBK4F52J61Gu14HB0EYnQc0&callback=initMap">
    </script>

  </body>
</html>
      <!-- onload="this.onload=function(){};handleClientLoad()"
      onreadystatechange="if (this.readyState === 'complete') this.onload()"> -->
